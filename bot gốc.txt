import os
import logging
import re
import time
from datetime import datetime
from dotenv import load_dotenv
import requests
from bs4 import BeautifulSoup
import telebot
from telebot import types
from openai import OpenAI
import base64
from PIL import Image, ImageDraw, ImageFont
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import psycopg2
from psycopg2.extras import RealDictCursor
import uuid

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

# C·∫•u h√¨nh logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# API Keys
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
YESCALE_API_KEY = os.getenv('YESCALE_API_KEY')

# Th√™m v√†o ph·∫ßn bi·∫øn m√¥i tr∆∞·ªùng
SUPABASE_DB_HOST = os.getenv('SUPABASE_DB_HOST')
SUPABASE_DB_PORT = os.getenv('SUPABASE_DB_PORT')
SUPABASE_DB_NAME = os.getenv('SUPABASE_DB_NAME')
SUPABASE_DB_USER = os.getenv('SUPABASE_DB_USER')
SUPABASE_DB_PASSWORD = os.getenv('SUPABASE_DB_PASSWORD')

# Th√™m v√†o ph·∫ßn bi·∫øn m√¥i tr∆∞·ªùng cho c√°c ph∆∞∆°ng th·ª©c k·∫øt n·ªëi kh√°c
SUPABASE_POOLER_HOST = os.getenv('SUPABASE_POOLER_HOST', 'aws-0-ap-southeast-1.pooler.supabase.com')
SUPABASE_POOLER_PORT = os.getenv('SUPABASE_POOLER_PORT', '6543')
SUPABASE_POOLER_USER = os.getenv('SUPABASE_POOLER_USER', 'postgres.nscsnynjuzebwtmicukk')

# Kh·ªüi t·∫°o bot
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# L∆∞u tr·ªØ tr·∫°ng th√°i ng∆∞·ªùi d√πng
user_states = {}

# Enum tr·∫°ng th√°i
WAITING_FOR_BIRTH_DATE = 1
WAITING_FOR_BIRTH_TIME = 2

# T·∫°o th∆∞ m·ª•c assets n·∫øu ch∆∞a t·ªìn t·∫°i
if not os.path.exists('assets'):
    os.makedirs('assets')

# Dictionary l∆∞u tr·ªØ s·ªë l∆∞·ª£ng l√° s·ªë ƒë√£ t·∫°o cho m·ªói ng∆∞·ªùi d√πng
user_chart_counts = {}

# Ph∆∞∆°ng √°n d·ª± ph√≤ng n·∫øu v·∫´n kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c
def create_temporary_database():
    """T·∫°o c∆° s·ªü d·ªØ li·ªáu t·∫°m th·ªùi b·∫±ng SQLite n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c Supabase"""
    try:
        import sqlite3
        logger.info("T·∫°o c∆° s·ªü d·ªØ li·ªáu SQLite t·∫°m th·ªùi")
        
        # T·∫°o th∆∞ m·ª•c data n·∫øu ch∆∞a t·ªìn t·∫°i
        if not os.path.exists('data'):
            os.makedirs('data')
        
        # K·∫øt n·ªëi ƒë·∫øn database SQLite
        conn = sqlite3.connect('data/tuvi_temp.db')
        cursor = conn.cursor()
        
        # T·∫°o b·∫£ng users
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE NOT NULL,
                first_name TEXT,
                last_name TEXT,
                username TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # T·∫°o b·∫£ng charts
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS charts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                day INTEGER NOT NULL,
                month INTEGER NOT NULL,
                year INTEGER NOT NULL,
                birth_time TEXT NOT NULL,
                gender TEXT NOT NULL,
                chart_image TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(telegram_id)
            )
        ''')
        
        conn.commit()
        logger.info("ƒê√£ kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu SQLite th√†nh c√¥ng")
        return conn
    except Exception as e:
        logger.error(f"L·ªói khi t·∫°o c∆° s·ªü d·ªØ li·ªáu t·∫°m th·ªùi: {e}")
        return None

# H√†m k·∫øt n·ªëi ƒë·∫øn Supabase v·ªõi nhi·ªÅu ph∆∞∆°ng th·ª©c th·ª≠ kh√°c nhau
def get_db_connection():
    # Danh s√°ch c√°c c·∫•u h√¨nh k·∫øt n·ªëi ƒë·ªÉ th·ª≠
    connection_configs = [
        # K·∫øt n·ªëi tr·ª±c ti·∫øp (Direct connection)
        {
            'host': SUPABASE_DB_HOST,
            'port': SUPABASE_DB_PORT,
            'database': SUPABASE_DB_NAME,
            'user': SUPABASE_DB_USER,
            'password': SUPABASE_DB_PASSWORD
        },
        # K·∫øt n·ªëi qua Transaction pooler
        {
            'host': SUPABASE_POOLER_HOST,
            'port': SUPABASE_POOLER_PORT,
            'database': SUPABASE_DB_NAME,
            'user': SUPABASE_POOLER_USER,
            'password': SUPABASE_DB_PASSWORD
        },
        # K·∫øt n·ªëi qua Session pooler
        {
            'host': SUPABASE_POOLER_HOST,
            'port': '5432',
            'database': SUPABASE_DB_NAME,
            'user': SUPABASE_POOLER_USER,
            'password': SUPABASE_DB_PASSWORD
        }
    ]
    
    # Th·ª≠ t·ª´ng c·∫•u h√¨nh k·∫øt n·ªëi cho ƒë·∫øn khi th√†nh c√¥ng
    last_error = None
    for config in connection_configs:
        try:
            logger.info(f"ƒêang th·ª≠ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu v·ªõi host: {config['host']} v√† port: {config['port']}")
            conn = psycopg2.connect(
                host=config['host'],
                port=config['port'],
                database=config['database'],
                user=config['user'],
                password=config['password'],
                connect_timeout=10  # Th√™m timeout ƒë·ªÉ kh√¥ng ƒë·ª£i qu√° l√¢u
            )
            conn.autocommit = True
            logger.info(f"K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu v·ªõi host: {config['host']}")
            return conn
        except Exception as e:
            last_error = e
            logger.warning(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu v·ªõi c·∫•u h√¨nh: {config['host']}:{config['port']} - L·ªói: {e}")
    
    # N·∫øu t·∫•t c·∫£ ƒë·ªÅu th·∫•t b·∫°i
    logger.error(f"T·∫•t c·∫£ c√°c ph∆∞∆°ng th·ª©c k·∫øt n·ªëi ƒë·ªÅu th·∫•t b·∫°i. L·ªói cu·ªëi c√πng: {last_error}")
    return None

# H√†m kh·ªüi t·∫°o c√°c b·∫£ng trong database
def init_database():
    conn = get_db_connection()
    if not conn:
        logger.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu")
        return
    
    try:
        cursor = conn.cursor()
        
        # T·∫°o b·∫£ng users
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                telegram_id BIGINT UNIQUE NOT NULL,
                first_name VARCHAR(255),
                last_name VARCHAR(255),
                username VARCHAR(255),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # T·∫°o b·∫£ng charts (l√° s·ªë t·ª≠ vi)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS charts (
                id SERIAL PRIMARY KEY,
                user_id BIGINT REFERENCES users(telegram_id),
                day INTEGER NOT NULL,
                month INTEGER NOT NULL,
                year INTEGER NOT NULL,
                birth_time VARCHAR(50) NOT NULL,
                gender VARCHAR(10) NOT NULL,
                chart_image TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        logger.info("ƒê√£ kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng")
    except Exception as e:
        logger.error(f"L·ªói khi kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu: {e}")
    finally:
        cursor.close()
        conn.close()

@bot.message_handler(commands=['start'])
def start(message):
    """B·∫Øt ƒë·∫ßu h·ªôi tho·∫°i v√† y√™u c·∫ßu ng√†y th√°ng nƒÉm sinh."""
    chat_id = message.chat.id
    
    # L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√†o c∆° s·ªü d·ªØ li·ªáu
    save_user(message.from_user)
    
    # L·ªùi ch√†o th√¢n thi·ªán h∆°n
    welcome_message = (
        "üåü *Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Bot T·ª≠ Vi!* üåü\n\n"
        "Bot s·∫Ω gi√∫p b·∫°n l·∫≠p v√† ph√¢n t√≠ch l√° s·ªë t·ª≠ vi d·ª±a tr√™n th√¥ng tin ng√†y sinh c·ªßa b·∫°n.\n\n"
        "üëâ Vui l√≤ng nh·∫≠p ng√†y th√°ng nƒÉm sinh c·ªßa b·∫°n theo ƒë·ªãnh d·∫°ng DD/MM/YYYY (v√≠ d·ª•: 15/08/1990):"
    )
    
    bot.send_message(
        chat_id,
        welcome_message,
        parse_mode='Markdown'
    )
    user_states[chat_id] = WAITING_FOR_BIRTH_DATE

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == WAITING_FOR_BIRTH_DATE)
def get_birth_date(message):
    """Nh·∫≠n ng√†y th√°ng nƒÉm sinh v√† y√™u c·∫ßu gi·ªù sinh."""
    chat_id = message.chat.id
    birth_date = message.text.strip()
    
    # Ki·ªÉm tra ƒë·ªãnh d·∫°ng ng√†y th√°ng
    pattern = r'^(\d{1,2})/(\d{1,2})/(\d{4})$'
    match = re.match(pattern, birth_date)
    
    if not match:
        bot.send_message(
            chat_id,
            "‚ö†Ô∏è *ƒê·ªãnh d·∫°ng ng√†y th√°ng kh√¥ng ƒë√∫ng*\n\n"
            "Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng DD/MM/YYYY\n"
            "V√≠ d·ª•: 15/08/1990 ho·∫∑c 5/4/1985",
            parse_mode='Markdown'
        )
        return
    
    day, month, year = match.groups()
    day, month, year = int(day), int(month), int(year)
    
    # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ng√†y th√°ng
    if not (1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2100):
        bot.send_message(
            chat_id,
            "‚ö†Ô∏è *Ng√†y th√°ng kh√¥ng h·ª£p l·ªá*\n\n"
            "Vui l√≤ng ki·ªÉm tra l·∫°i ng√†y, th√°ng, nƒÉm sinh c·ªßa b·∫°n v√† nh·∫≠p l·∫°i.",
            parse_mode='Markdown'
        )
        return
    
    # L∆∞u th√¥ng tin v√†o user_states
    user_states[chat_id] = {
        'state': WAITING_FOR_BIRTH_TIME,
        'day': day,
        'month': month,
        'year': year
    }
    
    # T·∫°o b√†n ph√≠m inline ƒë·ªÉ ch·ªçn gi·ªù sinh v·ªõi emoji
    markup = types.InlineKeyboardMarkup(row_width=3)
    
    # H√†ng 1
    btn_ty = types.InlineKeyboardButton("üïõ T√Ω (23h-1h)", callback_data="ty")
    btn_suu = types.InlineKeyboardButton("üïê S·ª≠u (1h-3h)", callback_data="suu")
    btn_dan = types.InlineKeyboardButton("üïí D·∫ßn (3h-5h)", callback_data="dan")
    markup.add(btn_ty, btn_suu, btn_dan)
    
    # H√†ng 2
    btn_mao = types.InlineKeyboardButton("üïî M√£o (5h-7h)", callback_data="mao")
    btn_thin = types.InlineKeyboardButton("üïñ Th√¨n (7h-9h)", callback_data="thin")
    btn_ty_hora = types.InlineKeyboardButton("üïò T·ªµ (9h-11h)", callback_data="ty_hora")
    markup.add(btn_mao, btn_thin, btn_ty_hora)
    
    # H√†ng 3
    btn_ngo = types.InlineKeyboardButton("üïö Ng·ªç (11h-13h)", callback_data="ngo")
    btn_mui = types.InlineKeyboardButton("üïú M√πi (13h-15h)", callback_data="mui")
    btn_than = types.InlineKeyboardButton("üïû Th√¢n (15h-17h)", callback_data="than")
    markup.add(btn_ngo, btn_mui, btn_than)
    
    # H√†ng 4
    btn_dau = types.InlineKeyboardButton("üï† D·∫≠u (17h-19h)", callback_data="dau")
    btn_tuat = types.InlineKeyboardButton("üï¢ Tu·∫•t (19h-21h)", callback_data="tuat")
    btn_hoi = types.InlineKeyboardButton("üï§ H·ª£i (21h-23h)", callback_data="hoi")
    markup.add(btn_dau, btn_tuat, btn_hoi)
    
    # H√†ng 5
    btn_unknown = types.InlineKeyboardButton("‚ùì Kh√¥ng r√µ gi·ªù sinh", callback_data="unknown")
    markup.add(btn_unknown)
    
    bot.send_message(
        chat_id, 
        f"üïê *Ch·ªçn gi·ªù sinh c·ªßa b·∫°n:*\n\nNg√†y sinh: {day}/{month}/{year}", 
        reply_markup=markup,
        parse_mode='Markdown'
    )

@bot.callback_query_handler(func=lambda call: True)
def get_birth_time(call):
    """Nh·∫≠n gi·ªù sinh v√† h·ªèi gi·ªõi t√≠nh."""
    chat_id = call.message.chat.id
    
    if isinstance(user_states.get(chat_id), dict) and user_states[chat_id].get('state') == WAITING_FOR_BIRTH_TIME:
        time_mapping = {
            "ty": "T√Ω", "suu": "S·ª≠u", "dan": "D·∫ßn", "mao": "M√£o", 
            "thin": "Th√¨n", "ty_hora": "T·ªµ", "ngo": "Ng·ªç", "mui": "M√πi", 
            "than": "Th√¢n", "dau": "D·∫≠u", "tuat": "Tu·∫•t", "hoi": "H·ª£i",
            "unknown": "Kh√¥ng r√µ"
        }
        
        # N·∫øu callback data l√† "analyze" ho·∫∑c "cancel_analysis", x·ª≠ l√Ω ph√¢n t√≠ch
        if call.data == "analyze":
            # X·ª≠ l√Ω ph√¢n t√≠ch l√° s·ªë t·ª≠ vi
            process_analysis(chat_id)
            return
        elif call.data == "cancel_analysis":
            bot.send_message(
                chat_id, 
                "‚úÖ ƒê√£ h·ªßy ph√¢n t√≠ch. B·∫°n c√≥ th·ªÉ g√µ /start ƒë·ªÉ l·∫≠p l√° s·ªë t·ª≠ vi m·ªõi.",
                parse_mode='Markdown'
            )
            del user_states[chat_id]
            return
        elif call.data == "male":
            # Ng∆∞·ªùi d√πng ch·ªçn gi·ªõi t√≠nh Nam
            user_states[chat_id]['gender'] = "Nam"
            process_tuvi_chart(chat_id)
            return
        elif call.data == "female":
            # Ng∆∞·ªùi d√πng ch·ªçn gi·ªõi t√≠nh N·ªØ
            user_states[chat_id]['gender'] = "N·ªØ"
            process_tuvi_chart(chat_id)
            return
        
        birth_time = time_mapping.get(call.data, "Kh√¥ng r√µ")
        user_states[chat_id]['birth_time'] = birth_time
        
        # Th√¥ng b√°o ƒë√£ ch·ªçn gi·ªù sinh
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text=f"‚úÖ B·∫°n ƒë√£ ch·ªçn gi·ªù sinh: *{birth_time}*",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.warning(f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tin nh·∫Øn: {e}")
        
        # T·∫°o b√†n ph√≠m inline ƒë·ªÉ ch·ªçn gi·ªõi t√≠nh
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_male = types.InlineKeyboardButton("üë® Nam", callback_data="male")
        btn_female = types.InlineKeyboardButton("üë© N·ªØ", callback_data="female")
        markup.add(btn_male, btn_female)
        
        bot.send_message(
            chat_id,
            "üë´ *Vui l√≤ng ch·ªçn gi·ªõi t√≠nh:*",
            reply_markup=markup,
            parse_mode='Markdown'
        )

def process_tuvi_chart(chat_id):
    """X·ª≠ l√Ω l√° s·ªë t·ª≠ vi."""
    # G·ª≠i th√¥ng b√°o ƒëang x·ª≠ l√Ω
    processing_msg = bot.send_message(
        chat_id, 
        "‚è≥ *ƒêang l·∫≠p l√° s·ªë t·ª≠ vi...*\n\nVui l√≤ng ƒë·ª£i trong gi√¢y l√°t, qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t 30-60 gi√¢y.",
        parse_mode='Markdown'
    )
    
    try:
        # L·∫•y th√¥ng tin t·ª´ tr·∫°ng th√°i ng∆∞·ªùi d√πng
        user_data = user_states[chat_id]
        day = user_data['day']
        month = user_data['month']
        year = user_data['year']
        birth_time = user_data['birth_time']
        gender = user_data['gender']
        
        # L·∫•y l√° s·ªë t·ª≠ vi v√† truy·ªÅn th√™m user_id
        result_path = get_tuvi_chart(day, month, year, birth_time, gender, chat_id, user_data)
        
        # X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
        bot.delete_message(chat_id, processing_msg.message_id)
        
        # L∆∞u ƒë∆∞·ªùng d·∫´n k·∫øt qu·∫£ v√†o tr·∫°ng th√°i ng∆∞·ªùi d√πng
        if result_path.endswith('.html'):
            user_states[chat_id]['chart_html_path'] = result_path
        else:
            user_states[chat_id]['chart_image_path'] = result_path
        
        # G·ª≠i k·∫øt qu·∫£ cho ng∆∞·ªùi d√πng
        if result_path.endswith('.jpg') or result_path.endswith('.png'):
            # N·∫øu l√† ·∫£nh, g·ª≠i tr·ª±c ti·∫øp
            with open(result_path, 'rb') as photo:
                bot.send_photo(
                    chat_id,
                    photo,
                    caption=f"‚ú® *L√° s·ªë t·ª≠ vi c·ªßa b·∫°n*\n\n‚Ä¢ Ng√†y sinh: {day}/{month}/{year}\n‚Ä¢ Gi·ªù sinh: {birth_time}\n‚Ä¢ Gi·ªõi t√≠nh: {gender}",
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton("üîÆ Ph√¢n t√≠ch l√° s·ªë", callback_data="analyze"),
                        types.InlineKeyboardButton("‚ùå H·ªßy", callback_data="cancel_analysis")
                    ),
                    parse_mode='Markdown'
                )
        else:
            # N·∫øu l√† HTML, chuy·ªÉn ƒë·ªïi th√†nh ·∫£nh
            screenshot_path = html_to_image(result_path, chat_id)
            with open(screenshot_path, 'rb') as photo:
                bot.send_photo(
                    chat_id,
                    photo,
                    caption=f"‚ú® *L√° s·ªë t·ª≠ vi c·ªßa b·∫°n*\n\n‚Ä¢ Ng√†y sinh: {day}/{month}/{year}\n‚Ä¢ Gi·ªù sinh: {birth_time}\n‚Ä¢ Gi·ªõi t√≠nh: {gender}",
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton("üîÆ Ph√¢n t√≠ch l√° s·ªë", callback_data="analyze"),
                        types.InlineKeyboardButton("‚ùå H·ªßy", callback_data="cancel_analysis")
                    ),
                    parse_mode='Markdown'
                )
            # L∆∞u ƒë∆∞·ªùng d·∫´n ·∫£nh
            user_states[chat_id]['chart_image_path'] = screenshot_path
        
    except Exception as e:
        logger.error(f"L·ªói khi x·ª≠ l√Ω l√° s·ªë t·ª≠ vi: {e}")
        # X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
        try:
            bot.delete_message(chat_id, processing_msg.message_id)
        except:
            pass
            
        bot.send_message(
            chat_id,
            "‚ùå *ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω l√° s·ªë t·ª≠ vi*\n\nVui l√≤ng th·ª≠ l·∫°i sau.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üîÑ Th·ª≠ l·∫°i", callback_data="/start")
            ),
            parse_mode='Markdown'
        )
        # X√≥a tr·∫°ng th√°i ng∆∞·ªùi d√πng
        del user_states[chat_id]

def get_tuvi_chart(day, month, year, birth_time, gender, user_id, user_data):
    """
    Truy c·∫≠p trang web tuvivietnam.vn/lasotuvi ƒë·ªÉ l·∫≠p l√° s·ªë t·ª≠ vi v√† l∆∞u HTML k·∫øt qu·∫£
    """
    # Th√¥ng b√°o ƒëang x·ª≠ l√Ω
    logger.info(f"ƒêang l·∫•y l√° s·ªë t·ª≠ vi cho {day}/{month}/{year}, gi·ªù {birth_time}, gi·ªõi t√≠nh {gender}")
    
    # Chuy·ªÉn ƒë·ªïi gi·ªù sinh theo ƒë·ªãnh d·∫°ng gi·ªù (l·∫•y gi√° tr·ªã trung b√¨nh c·ªßa kho·∫£ng gi·ªù)
    hour_mapping = {
        "T√Ω": "00", "S·ª≠u": "02", "D·∫ßn": "04", "M√£o": "06", 
        "Th√¨n": "08", "T·ªµ": "10", "Ng·ªç": "12", "M√πi": "14", 
        "Th√¢n": "16", "D·∫≠u": "18", "Tu·∫•t": "20", "H·ª£i": "22",
        "Kh√¥ng r√µ": "12"  # M·∫∑c ƒë·ªãnh l√† 12 gi·ªù tr∆∞a n·∫øu kh√¥ng r√µ
    }
    
    hour = hour_mapping.get(birth_time, "12")
    
    try:
        # Thi·∫øt l·∫≠p Chrome options
        chrome_options = Options()
        chrome_options.add_argument("--headless")  # Ch·∫°y ·∫©n
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--window-size=1920,1080")
        
        # Kh·ªüi t·∫°o tr√¨nh duy·ªát
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        # Truy c·∫≠p trang web
        driver.get("https://tuvivietnam.vn/lasotuvi/")
        
        # ƒê·ª£i trang web t·∫£i xong
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "txtHoTen"))
        )
        
        # ƒêi·ªÅn th√¥ng tin v√†o form
        # H·ªç t√™n
        name_input = driver.find_element(By.ID, "txtHoTen")
        name_input.send_keys("H·ªçc T·ª≠ Vi Bot")
        
        # Ch·ªçn gi·ªõi t√≠nh
        if gender == "Nam":
            driver.find_element(By.ID, "radNam").click()
        else:
            driver.find_element(By.ID, "radNu").click()
        
        # Ch·ªçn lo·∫°i l·ªãch (m·∫∑c ƒë·ªãnh l√† d∆∞∆°ng l·ªãch)
        driver.find_element(By.ID, "duong_lich").click()
        
        # Ch·ªçn nƒÉm sinh
        year_select = Select(driver.find_element(By.ID, "inam_duong"))
        year_select.select_by_value(str(year))
        
        # Ch·ªçn th√°ng sinh
        month_select = Select(driver.find_element(By.ID, "ithang_duong"))
        month_select.select_by_value(f"{month:02d}")
        
        # Ch·ªçn ng√†y sinh
        day_select = Select(driver.find_element(By.ID, "ingay_duong"))
        day_select.select_by_value(f"{day:02d}")
        
        # Ch·ªçn gi·ªù sinh
        hour_select = Select(driver.find_element(By.ID, "gio_duong"))
        hour_select.select_by_value(hour)
        
        # Ch·ªçn ph√∫t sinh (m·∫∑c ƒë·ªãnh 0)
        minute_select = Select(driver.find_element(By.ID, "phut_duong"))
        minute_select.select_by_value("00")
        
        # Ch·ªçn nƒÉm xem h·∫°n (m·∫∑c ƒë·ªãnh nƒÉm hi·ªán t·∫°i)
        current_year = datetime.now().year
        year_xem_select = Select(driver.find_element(By.ID, "selNamXemD"))
        year_xem_select.select_by_value(str(current_year))
        
        # Ch·ªçn ki·ªÉu ·∫£nh m√†u
        driver.find_element(By.ID, "radMau").click()
        
        # Ch·ªçn th·ªùi gian l∆∞u ·∫£nh (30 ng√†y)
        driver.find_element(By.ID, "radluu").click()
        
        # Kh√¥ng c·∫£nh b√°o m√∫i gi·ªù
        driver.find_element(By.ID, "canhbao_no").click()
        
        # ƒê·∫£m b·∫£o ƒë√°nh d·∫•u v√†o √¥ ƒë·ªìng √Ω
        confirm_checkbox = driver.find_element(By.ID, "iconfirm1")
        if not confirm_checkbox.is_selected():
            confirm_checkbox.click()
        
        # L∆∞u s·ªë c·ª≠a s·ªï/tab hi·ªán t·∫°i
        current_window_count = len(driver.window_handles)
        
        # Submit form
        submit_button = driver.find_element(By.XPATH, "//input[@value='An sao T·ª≠ Vi']")
        submit_button.click()
        
        # ƒê·ª£i tab m·ªõi m·ªü ra
        WebDriverWait(driver, 20).until(
            lambda d: len(d.window_handles) > current_window_count
        )
        
        # Chuy·ªÉn sang tab m·ªõi
        driver.switch_to.window(driver.window_handles[-1])
        
        # ƒê·ª£i trang t·∫£i xong
        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        
        # L∆∞u HTML c·ªßa trang k·∫øt qu·∫£
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        html_path = f"assets/{user_id}_chart_{timestamp}.html"
        
        # T·∫°o th∆∞ m·ª•c assets n·∫øu ch∆∞a t·ªìn t·∫°i
        if not os.path.exists('assets'):
            os.makedirs('assets')
        
        with open(html_path, "w", encoding="utf-8") as f:
            f.write(driver.page_source)
        
        logger.info(f"ƒê√£ l∆∞u HTML l√° s·ªë t·ª≠ vi: {html_path}")
        
        # T√¨m v√† tr√≠ch xu·∫•t ·∫£nh base64 t·ª´ HTML
        image_path = extract_base64_image_from_html(html_path, timestamp, user_id, user_data)
        if image_path:
            logger.info(f"ƒê√£ tr√≠ch xu·∫•t ·∫£nh l√° s·ªë t·ª≠ vi: {image_path}")
        
        # ƒê√≥ng tr√¨nh duy·ªát
        driver.quit()
        
        # Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ·∫£nh n·∫øu ƒë√£ tr√≠ch xu·∫•t ƒë∆∞·ª£c, n·∫øu kh√¥ng th√¨ tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n HTML
        return image_path if image_path else html_path
        
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y l√° s·ªë t·ª≠ vi v·ªõi Selenium: {e}")
        
        # N·∫øu tr√¨nh duy·ªát ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o, ch·ª•p m√†n h√¨nh l·ªói v√† ƒë√≥ng tr√¨nh duy·ªát
        try:
            if 'driver' in locals():
                error_screenshot = f"error_{datetime.now().strftime('%Y%m%d%H%M%S')}.png"
                driver.save_screenshot(error_screenshot)
                logger.info(f"ƒê√£ ch·ª•p m√†n h√¨nh l·ªói: {error_screenshot}")
                driver.quit()
        except:
            pass
        
        # T·∫°o ·∫£nh gi·∫£ trong tr∆∞·ªùng h·ª£p l·ªói
            timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
            image_path = f"assets/{user_id}_chart_{timestamp}.jpg"
        
        # T·∫°o ·∫£nh tr·ªëng v·ªõi th√¥ng tin l·ªói
        img = Image.new('RGB', (800, 600), color=(255, 255, 255))
        d = ImageDraw.Draw(img)
        d.text((10, 10), f"L√° s·ªë t·ª≠ vi cho ng∆∞·ªùi sinh ng√†y {day}/{month}/{year}, gi·ªù {birth_time}, gi·ªõi t√≠nh {gender}", fill=(0, 0, 0))
        d.text((10, 50), f"C√≥ l·ªói x·∫£y ra khi l·∫•y l√° s·ªë t·ª≠ vi: {str(e)}", fill=(0, 0, 0))
        d.text((10, 90), "Vui l√≤ng th·ª≠ l·∫°i sau.", fill=(0, 0, 0))
        img.save(image_path)
        
        return image_path
    
def html_to_image(html_path, user_id):
    """Chuy·ªÉn ƒë·ªïi file HTML th√†nh ·∫£nh v·ªõi ƒë·ªãnh d·∫°ng t√™n file theo user_id"""
    try:
        # Thi·∫øt l·∫≠p Chrome options
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--window-size=1920,1080")
        
        # Kh·ªüi t·∫°o tr√¨nh duy·ªát
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        # M·ªü file HTML
        driver.get(f"file://{os.path.abspath(html_path)}")
        
        # ƒê·ª£i trang t·∫£i xong
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        
        # TƒÉng s·ªë l∆∞·ª£ng l√° s·ªë cho user_id
        if user_id not in user_chart_counts:
            user_chart_counts[user_id] = 1
        else:
            user_chart_counts[user_id] += 1
        
        # L∆∞u screenshot theo c·∫•u tr√∫c /assets/{userid}_{s·ªë th·ª© t·ª±}
        screenshot_path = f"assets/{user_id}_{user_chart_counts[user_id]}.png"
        
        driver.save_screenshot(screenshot_path)
        
        # ƒê√≥ng tr√¨nh duy·ªát
        driver.quit()
        
        return screenshot_path
    
    except Exception as e:
        logger.error(f"L·ªói khi chuy·ªÉn HTML th√†nh ·∫£nh: {e}")
        raise

def analyze_chart_with_gpt(chart_path, user_data):
    """
    Ph√¢n t√≠ch l√° s·ªë t·ª≠ vi v·ªõi YesScale API theo c√°ch chuy√™n nghi·ªáp
    """
    try:
        # L·∫•y th√¥ng tin t·ª´ user_data
        day = user_data['day']
        month = user_data['month']
        year = user_data['year']
        birth_time = user_data['birth_time']
        gender = user_data['gender']
        
        # ƒê·ªçc ·∫£nh v√† chuy·ªÉn th√†nh base64
        with open(chart_path, "rb") as image_file:
            base64_image = base64.b64encode(image_file.read()).decode('utf-8')
        
        # Prompt chuy√™n nghi·ªáp h∆°n v·ªõi h∆∞·ªõng d·∫´n chi ti·∫øt
        system_prompt = """
B·∫°n l√† m·ªôt chuy√™n gia cao c·∫•p v·ªÅ t·ª≠ vi Vi·ªát Nam v·ªõi h∆°n 30 nƒÉm kinh nghi·ªám lu·∫≠n ƒëo√°n l√° s·ªë t·ª≠ vi. 
H√£y ph√¢n t√≠ch l√° s·ªë t·ª≠ vi ƒë∆∞·ª£c cung c·∫•p m·ªôt c√°ch chuy√™n s√¢u v√† ch√≠nh x√°c.

S·ª≠ d·ª•ng ng√¥n ng·ªØ trang tr·ªçng, uy√™n b√°c v√† ch√≠nh x√°c v·ªÅ m·∫∑t thu·∫≠t ng·ªØ t·ª≠ vi, nh∆∞ng v·∫´n ƒë·∫£m b·∫£o ng∆∞·ªùi ƒë·ªçc hi·ªÉu ƒë∆∞·ª£c. 
Ph√¢n t√≠ch c·∫ßn bao g·ªìm c√°c y·∫øu t·ªë quan tr·ªçng t·ª´ c·∫£ T·ª© Tr·ª• (NƒÉm-Th√°ng-Ng√†y-Gi·ªù) v√† c√°c sao trong l√° s·ªë t·ª≠ vi.

C·∫•u tr√∫c ph√¢n t√≠ch nh∆∞ sau:

1. **T·ªîNG QUAN M·ªÜNH C·ª§C**
   - Can Chi Ng√†y Sinh, Ng≈© H√†nh N·∫°p √Çm
   - Cung M·ªánh v√† Cung Th√¢n
   - C√°c sao ch·ªß v·ªÅ M·ªánh
   - ƒê√°nh gi√° t·ªïng quan v·ªÅ M·ªánh c·ª•c v√† ti·ªÅm nƒÉng cu·ªôc ƒë·ªùi

2. **V·∫¨N M·ªÜNH THEO T·ª™NG GIAI ƒêO·∫†N**
   - Th·ªùi ni√™n thi·∫øu (0-20 tu·ªïi)
   - Th·ªùi ti·ªÅn v·∫≠n (21-40 tu·ªïi)
   - Th·ªùi trung v·∫≠n (41-60 tu·ªïi)
   - Th·ªùi h·∫≠u v·∫≠n (61 tu·ªïi tr·ªü ƒëi)

3. **S·ª∞ NGHI·ªÜP & T√ÄI L·ªòC**
   - Ph√¢n t√≠ch cung Quan L·ªôc, T√†i B·∫°ch
   - C√°c sao ch·ªß v·ªÅ s·ª± nghi·ªáp v√† t√†i l·ªôc
   - Th·ªùi ƒëi·ªÉm thƒÉng ti·∫øn v√† c√°c th·ªùi k·ª≥ th√°ch th·ª©c
   - Ng√†nh ngh·ªÅ ph√π h·ª£p
   - Kh·∫£ nƒÉng l√†m gi√†u v√† c√°ch ph√°t tri·ªÉn t√†i l·ªôc

4. **T√åNH DUY√äN & H√îN NH√ÇN**
   - Ph√¢n t√≠ch cung Phu/Th√™
   - Th·ªùi ƒëi·ªÉm k·∫øt h√¥n l√Ω t∆∞·ªüng
   - ƒê·∫∑c ƒëi·ªÉm ng∆∞·ªùi b·∫°n ƒë·ªùi
   - C√°c sao ·∫£nh h∆∞·ªüng ƒë·∫øn h√¥n nh√¢n
   - M·ªëi quan h·ªá v·ªõi con c√°i (cung T·ª≠ T·ª©c)

5. **S·ª®C KH·ªéE & T√ÇM L√ù**
   - ƒêi·ªÉm m·∫°nh v√† ƒëi·ªÉm y·∫øu v·ªÅ s·ª©c kh·ªèe
   - B·ªánh t·∫≠t ti·ªÅm ·∫©n c·∫ßn ƒë·ªÅ ph√≤ng
   - ƒê·∫∑c ƒëi·ªÉm t√¢m l√Ω v√† t√≠nh c√°ch
   - L·ªùi khuy√™n v·ªÅ c√°ch b·∫£o v·ªá s·ª©c kh·ªèe

6. **PH∆Ø∆†NG PH√ÅP KHAI V·∫¨N**
   - H∆∞·ªõng t·ªët & x·∫•u
   - M√†u s·∫Øc h·ª£p m·ªánh
   - C√°c linh v·∫≠t, b√πa h·ªô m·ªánh ph√π h·ª£p
   - C√°ch th·ª©c h√≥a gi·∫£i v·∫≠n h·∫°n
   - Th·ªùi ƒëi·ªÉm thu·∫≠n l·ª£i ƒë·ªÉ ph√°t tri·ªÉn (ng√†y/th√°ng/nƒÉm t·ªët)

7. **V·∫¨N H·∫†N NƒÇM {CURRENT_YEAR}**
   - V·∫≠n h·∫°n ch√≠nh trong nƒÉm nay
   - Th·ªùi ƒëi·ªÉm th√°ch th·ª©c v√† c∆° h·ªôi
   - L·ªùi khuy√™n c·ª• th·ªÉ cho nƒÉm nay

Ph√¢n t√≠ch c·∫ßn d·ª±a tr√™n c√°c sao ch√≠nh v√† ph·ª• trong l√° s·ªë. ƒê·∫∑c bi·ªát ch√∫ √Ω ƒë·∫øn s·ª± t∆∞∆°ng t√°c gi·ªØa c√°c sao, cung v√† v·∫≠n, 
ƒë·ªÉ ƒë∆∞a ra nh·∫≠n ƒë·ªãnh s√°t v·ªõi th·ª±c t·∫ø nh·∫•t. S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p l√Ω gi·∫£i theo c·∫£ T·ª≠ Vi ƒê·∫©u S·ªë c·ªï ƒëi·ªÉn v√† 
c√°c tr∆∞·ªùng ph√°i hi·ªán ƒë·∫°i nh∆∞ T·ª≠ Vi ƒê·∫©u S·ªë H√† L·∫°c v√† T·ª≠ Vi Nam T√¥ng.
"""

        # X√°c ƒë·ªãnh nƒÉm hi·ªán t·∫°i ƒë·ªÉ ph√¢n t√≠ch v·∫≠n h·∫°n
        current_year = datetime.now().year
        system_prompt = system_prompt.replace("{CURRENT_YEAR}", str(current_year))
        
        # G·ªçi YesScale API v·ªõi ·∫£nh
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {YESCALE_API_KEY}'
        }
        
        payload = {
            'model': 'gpt-4-turbo',
            'messages': [
                {
                    'role': 'system',
                    'content': system_prompt
                },
                {
                    'role': 'user',
                    'content': [
                        {
                            'type': 'text',
                            'text': f'ƒê√¢y l√† l√° s·ªë t·ª≠ vi c·ªßa ng∆∞·ªùi sinh ng√†y {day}/{month}/{year}, gi·ªù {birth_time}, gi·ªõi t√≠nh {gender}. H√£y ph√¢n t√≠ch v√† lu·∫≠n gi·∫£i chi ti·∫øt d·ª±a tr√™n c√°c sao v√† cung trong l√° s·ªë n√†y. ƒê·ª´ng b·ªè qua b·∫•t k·ª≥ y·∫øu t·ªë quan tr·ªçng n√†o v√† ƒë·∫£m b·∫£o ƒë·ªÅ c·∫≠p ƒë·∫øn t·∫•t c·∫£ c√°c cung trong l√° s·ªë.'
                        },
                        {
                            'type': 'image_url',
                            'image_url': {
                                'url': f'data:image/jpeg;base64,{base64_image}'
                            }
                        }
                    ]
                }
            ],
            'max_tokens': 4000,
            'temperature': 0.7,
            'top_p': 1
        }
        
        response = requests.post(
            'https://api.yescale.io/v1/chat/completions',
            headers=headers,
            json=payload
        )
        
        # Ki·ªÉm tra ph·∫£n h·ªìi
        if response.status_code == 200:
            result = response.json()
            analysis = result['choices'][0]['message']['content']
        else:
            logger.error(f"L·ªói khi g·ªçi YesScale API: {response.status_code} - {response.text}")
            return f"C√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch l√° s·ªë t·ª≠ vi. M√£ l·ªói: {response.status_code}"
        
        # Format ph√¢n t√≠ch theo y√™u c·∫ßu
        formatted_analysis = format_analysis(analysis, user_data)
        
        return formatted_analysis
    
    except Exception as e:
        logger.error(f"L·ªói khi ph√¢n t√≠ch v·ªõi YesScale API: {e}")
        return "C√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch l√° s·ªë t·ª≠ vi. Vui l√≤ng th·ª≠ l·∫°i sau."

def format_analysis(analysis, user_data):
    """
    ƒê·ªãnh d·∫°ng ph√¢n t√≠ch t·ª≠ vi, gi·∫£m b·ªõt ƒë·ªô d√†i nh∆∞ng v·∫´n ƒë·∫πp
    """
    # T·∫°o header ƒë·∫πp h∆°n nh∆∞ng ng·∫Øn g·ªçn
    header = f"üîÆ *L√Å S·ªê T·ª¨ VI* üîÆ\n\n"
    header += f"üë§ Sinh: {user_data['day']}/{user_data['month']}/{user_data['year']} ({user_data['birth_time']})\n"
    header += f"üë§ Gi·ªõi: {user_data['gender']}\n\n"
    
    # X·ª≠ l√Ω ph√¢n t√≠ch ƒë·ªÉ th√™m emoji v√† ƒë·ªãnh d·∫°ng
    formatted_analysis = analysis
    
    # Lo·∫°i b·ªè c√°c d·∫•u ### n·∫øu c√≥
    formatted_analysis = re.sub(r'#{1,6}\s+', '', formatted_analysis)
    
    # Th√™m emoji v√† ƒë·ªãnh d·∫°ng cho c√°c ph·∫ßn
    section_emojis = {
        "T·ªîNG QUAN M·ªÜNH C·ª§C": "üå†",
        "V·∫¨N M·ªÜNH THEO T·ª™NG GIAI ƒêO·∫†N": "‚è≥",
        "S·ª∞ NGHI·ªÜP & T√ÄI L·ªòC": "üí∞",
        "T√åNH DUY√äN & H√îN NH√ÇN": "‚ù§Ô∏è",
        "S·ª®C KH·ªéE & T√ÇM L√ù": "üè•",
        "PH∆Ø∆†NG PH√ÅP KHAI V·∫¨N": "üîë"
    }
    
    # C·∫£i thi·ªán ƒë·ªãnh d·∫°ng ti√™u ƒë·ªÅ c√°c ph·∫ßn, l√†m ng·∫Øn g·ªçn h∆°n
    for section, emoji in section_emojis.items():
        patterns = [
            fr'\d+\.\s*{section}',  # m·∫´u: "1. SECTION"
            fr'\*\*{section}\*\*',  # m·∫´u: "**SECTION**"
            section  # m·∫´u: "SECTION"
        ]
        
        for pattern in patterns:
            if re.search(pattern, formatted_analysis, re.IGNORECASE):
                formatted_analysis = re.sub(
                    pattern,
                    f"{emoji} *{section}*",  # B·ªè emoji ·ªü cu·ªëi ƒë·ªÉ gi·∫£m ƒë·ªô d√†i
                    formatted_analysis,
                    flags=re.IGNORECASE
                )
    
    # Th√™m ƒë∆∞·ªùng k·∫ª ng·∫Øn h∆°n gi·ªØa c√°c ph·∫ßn ƒë·ªÉ d·ªÖ ƒë·ªçc
    section_divider = "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
    for section, emoji in section_emojis.items():
        formatted_title = f"{emoji} *{section}*"
        if formatted_title in formatted_analysis:
            formatted_analysis = formatted_analysis.replace(
                formatted_title, 
                f"{section_divider}{formatted_title}\n\n"
            )
    
    # K·∫øt h·ª£p v·ªõi header
    formatted_text = header + formatted_analysis.lstrip(section_divider)
    
    # Th√™m footer ng·∫Øn g·ªçn
    footer = "\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    footer += "üí´ *L∆∞u √Ω*: Ph√¢n t√≠ch mang t√≠nh tham kh·∫£o.\n"
    footer += "*/start* - Xem l√° s·ªë m·ªõi\n"
    
    return formatted_text + footer

@bot.message_handler(commands=['cancel'])
def cancel(message):
    """H·ªßy h·ªôi tho·∫°i."""
    chat_id = message.chat.id
    bot.send_message(
        chat_id,
        "‚ùå *ƒê√£ h·ªßy thao t√°c*\n\nG√µ /start ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i ho·∫∑c /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n.",
        parse_mode='Markdown'
    )
    if chat_id in user_states:
        del user_states[chat_id]

@bot.message_handler(commands=['help'])
def help_command(message):
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng."""
    chat_id = message.chat.id
    help_text = (
        "üîÆ *H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG BOT T·ª¨ VI* üîÆ\n\n"
        "Bot n√†y gi√∫p b·∫°n l·∫≠p v√† ph√¢n t√≠ch l√° s·ªë t·ª≠ vi d·ª±a tr√™n th√¥ng tin ng√†y sinh. C√°c l·ªánh c∆° b·∫£n:\n\n"
        "‚Ä¢ /start - B·∫Øt ƒë·∫ßu l·∫≠p l√° s·ªë t·ª≠ vi\n"
        "‚Ä¢ /cancel - H·ªßy thao t√°c hi·ªán t·∫°i\n"
        "‚Ä¢ /help - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y\n\n"
        "‚ú® *Quy tr√¨nh s·ª≠ d·ª•ng*:\n"
        "1. Nh·∫≠p ng√†y th√°ng nƒÉm sinh (DD/MM/YYYY)\n"
        "2. Ch·ªçn gi·ªù sinh (theo 12 con gi√°p)\n"
        "3. Ch·ªçn gi·ªõi t√≠nh\n"
        "4. ƒê·ª£i bot l·∫≠p l√° s·ªë t·ª≠ vi\n"
        "5. Ch·ªçn 'Ph√¢n t√≠ch l√° s·ªë' ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c lu·∫≠n gi·∫£i chi ti·∫øt\n\n"
        "üîç *L∆∞u √Ω*: ƒê·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c, vui l√≤ng cung c·∫•p th√¥ng tin ƒë·∫ßy ƒë·ªß v√† ch√≠nh x√°c."
    )
    
    bot.send_message(
        chat_id,
        help_text,
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    """X·ª≠ l√Ω c√°c tin nh·∫Øn kh√¥ng r√µ."""
    chat_id = message.chat.id
    if chat_id not in user_states:
        bot.send_message(
            chat_id,
            "ü§î Bot kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n.\n\n"
            "‚Ä¢ G√µ /start ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫≠p l√° s·ªë t·ª≠ vi\n"
            "‚Ä¢ G√µ /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng",
            parse_mode='Markdown'
        )
    else:
        bot.send_message(
            chat_id,
            "‚ö†Ô∏è Vui l√≤ng l√†m theo h∆∞·ªõng d·∫´n ho·∫∑c g√µ /cancel ƒë·ªÉ h·ªßy thao t√°c hi·ªán t·∫°i.",
            parse_mode='Markdown'
        )

def process_analysis(chat_id):
    """X·ª≠ l√Ω ph√¢n t√≠ch l√° s·ªë t·ª≠ vi."""
    if chat_id not in user_states:
        bot.send_message(
            chat_id, 
            "‚ùå *Kh√¥ng t√¨m th·∫•y l√° s·ªë t·ª≠ vi*\n\nVui l√≤ng g√µ /start ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.",
            parse_mode='Markdown'
        )
        return
    
    # Ki·ªÉm tra xem c√≥ ƒë∆∞·ªùng d·∫´n ·∫£nh ho·∫∑c HTML kh√¥ng
    if 'chart_image_path' not in user_states[chat_id] and 'chart_html_path' not in user_states[chat_id]:
        bot.send_message(
            chat_id, 
            "‚ùå *Kh√¥ng t√¨m th·∫•y l√° s·ªë t·ª≠ vi*\n\nVui l√≤ng g√µ /start ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.",
            parse_mode='Markdown'
        )
        return
    
    # G·ª≠i th√¥ng b√°o ƒëang ph√¢n t√≠ch
    processing_msg = bot.send_message(
        chat_id, 
        "‚è≥ *ƒêang ph√¢n t√≠ch l√° s·ªë t·ª≠ vi...*\n\nVui l√≤ng ƒë·ª£i trong gi√¢y l√°t, qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t 30-60 gi√¢y.",
        parse_mode='Markdown'
    )
    
    try:
        # L·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh ho·∫∑c HTML t·ª´ tr·∫°ng th√°i ng∆∞·ªùi d√πng
        if 'chart_image_path' in user_states[chat_id]:
            chart_path = user_states[chat_id]['chart_image_path']
        else:
            chart_path = user_states[chat_id]['chart_html_path']
            # N·∫øu l√† HTML, chuy·ªÉn ƒë·ªïi th√†nh ·∫£nh
            if chart_path.endswith('.html'):
                # Th·ª≠ tr√≠ch xu·∫•t ·∫£nh base64 t·ª´ HTML
                timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
                image_path = extract_base64_image_from_html(chart_path, chat_id, user_states[chat_id])
                if image_path:
                    chart_path = image_path
                else:
                    # N·∫øu kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c, chuy·ªÉn HTML th√†nh ·∫£nh
                    chart_path = html_to_image(chart_path, chat_id)
                user_states[chat_id]['chart_image_path'] = chart_path
        
        # Ph√¢n t√≠ch l√° s·ªë t·ª≠ vi
        analysis = analyze_chart_with_gpt(chart_path, user_states[chat_id])
        
        # X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
        try:
            bot.delete_message(chat_id, processing_msg.message_id)
        except Exception as e:
            logger.warning(f"Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn 'ƒëang x·ª≠ l√Ω': {e}")
        
        # G·ª≠i ph√¢n t√≠ch cho ng∆∞·ªùi d√πng
        # Ph√¢n t√≠ch c√≥ th·ªÉ d√†i, c·∫ßn chia th√†nh nhi·ªÅu ph·∫ßn n·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n
        max_length = 4000  # Gi·ªõi h·∫°n tin nh·∫Øn Telegram
        
        if len(analysis) <= max_length:
            try:
                bot.send_message(chat_id, analysis, parse_mode='Markdown')
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i ph√¢n t√≠ch: {e}")
                # G·ª≠i kh√¥ng c√≥ ƒë·ªãnh d·∫°ng Markdown n·∫øu c√≥ l·ªói
                try:
                    bot.send_message(chat_id, "‚ùå Kh√¥ng th·ªÉ hi·ªÉn th·ªã ƒë·ªãnh d·∫°ng ƒë·∫πp, g·ª≠i d·∫°ng vƒÉn b·∫£n th∆∞·ªùng.")
                    bot.send_message(chat_id, analysis)
                except:
                    bot.send_message(chat_id, "‚ùå Ph√¢n t√≠ch qu√° d√†i. Vui l√≤ng xem t·ª´ng ph·∫ßn chi ti·∫øt b√™n d∆∞·ªõi.")
        else:
            # Chia ph√¢n t√≠ch th√†nh nhi·ªÅu ph·∫ßn
            parts = []
            current_part = ""
            
            # Chia theo ƒëo·∫°n ƒë·ªÉ tr√°nh c·∫Øt gi·ªØa ƒëo·∫°n markdown
            lines = analysis.split('\n')
            for line in lines:
                if len(current_part) + len(line) + 1 > max_length:
                    parts.append(current_part)
                    current_part = line + '\n'
                else:
                    current_part += line + '\n'
            
            if current_part:
                parts.append(current_part)
            
            # G·ª≠i t·ª´ng ph·∫ßn
            for i, part in enumerate(parts):
                try:
                    if i == 0:  # Ph·∫ßn ƒë·∫ßu ti√™n
                        bot.send_message(chat_id, part, parse_mode='Markdown')
                    else:  # C√°c ph·∫ßn ti·∫øp theo
                        bot.send_message(chat_id, f"(ti·∫øp theo)...\n\n{part}", parse_mode='Markdown')
                except Exception as e:
                    logger.error(f"L·ªói khi g·ª≠i ph·∫ßn {i+1}/{len(parts)}: {e}")
                    try:
                        # G·ª≠i kh√¥ng c√≥ ƒë·ªãnh d·∫°ng Markdown n·∫øu c√≥ l·ªói
                        bot.send_message(chat_id, f"(ti·∫øp theo - ph·∫ßn {i+1}/{len(parts)})...\n\n{part}")
                    except:
                        bot.send_message(chat_id, f"‚ùå Kh√¥ng th·ªÉ g·ª≠i ph·∫ßn {i+1}/{len(parts)} do qu√° d√†i.")
        
        # Th√™m l·ª±a ch·ªçn xem chi ti·∫øt t·ª´ng kh√≠a c·∫°nh
        chart_id = save_chart_for_details(chat_id, user_states[chat_id], chart_path)
        
        detail_markup = types.InlineKeyboardMarkup(row_width=2)
        detail_markup.add(
            types.InlineKeyboardButton("üí∞ S·ª± nghi·ªáp & T√†i l·ªôc", callback_data=f"detail_career_{chart_id}"),
            types.InlineKeyboardButton("‚ù§Ô∏è T√¨nh duy√™n & H√¥n nh√¢n", callback_data=f"detail_love_{chart_id}"),
            types.InlineKeyboardButton("üè• S·ª©c kh·ªèe & T√¢m l√Ω", callback_data=f"detail_health_{chart_id}"),
            types.InlineKeyboardButton("üîë Ph∆∞∆°ng ph√°p khai v·∫≠n", callback_data=f"detail_remedies_{chart_id}")
        )
        
        bot.send_message(
            chat_id,
            "üëá *B·∫°n mu·ªën xem chi ti·∫øt v·ªÅ kh√≠a c·∫°nh n√†o?*",
            reply_markup=detail_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"L·ªói khi ph√¢n t√≠ch l√° s·ªë t·ª≠ vi: {e}")
        try:
            bot.send_message(
                chat_id,
                "‚ùå *ƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch l√° s·ªë t·ª≠ vi*\n\nVui l√≤ng th·ª≠ l·∫°i sau.",
                parse_mode='Markdown'
            )
            # X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
            bot.delete_message(chat_id, processing_msg.message_id)
        except Exception as delete_error:
            logger.warning(f"Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn ho·∫∑c g·ª≠i th√¥ng b√°o l·ªói: {delete_error}")

def save_chart_for_details(chat_id, user_data, chart_path):
    """L∆∞u th√¥ng tin l√° s·ªë ƒë·ªÉ s·ª≠ d·ª•ng cho chi ti·∫øt c√°c kh√≠a c·∫°nh"""
    conn = get_db_connection()
    if not conn:
        # Tr·∫£ v·ªÅ m·ªôt ID ng·∫´u nhi√™n n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c CSDL
        return str(uuid.uuid4())
    
    try:
        # L·∫•y base64 image t·ª´ file
        with open(chart_path, "rb") as image_file:
            base64_image = base64.b64encode(image_file.read()).decode('utf-8')
        
        cursor = conn.cursor()
        
        # L∆∞u v√†o database n·∫øu ch∆∞a c√≥
        cursor.execute("""
            INSERT INTO charts (user_id, day, month, year, birth_time, gender, chart_image)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
            RETURNING id
        """, (
            chat_id, 
            user_data['day'], 
            user_data['month'], 
            user_data['year'], 
            user_data['birth_time'], 
            user_data['gender'], 
            base64_image
        ))
        
        result = cursor.fetchone()
        chart_id = result[0] if result else str(uuid.uuid4())
        
        return chart_id
    except Exception as e:
        logger.error(f"L·ªói khi l∆∞u l√° s·ªë: {e}")
        return str(uuid.uuid4())  # Tr·∫£ v·ªÅ ID ng·∫´u nhi√™n trong tr∆∞·ªùng h·ª£p l·ªói
    finally:
        if conn and hasattr(conn, 'close'):
            try:
                conn.close()
            except:
                pass

def extract_base64_image_from_html(html_path, timestamp, user_id, user_data):
    """
    Tr√≠ch xu·∫•t ·∫£nh base64 t·ª´ file HTML, l∆∞u file v√† l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
    """
    try:
        # ƒê·ªçc n·ªôi dung file HTML
        with open(html_path, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # T√¨m t·∫•t c·∫£ c√°c chu·ªói data:image/jpeg;base64
        pattern = r'data:image/[^;]+;base64,([^"\']+)'
        matches = re.findall(pattern, html_content)
        
        if not matches:
            logger.warning("Kh√¥ng t√¨m th·∫•y ·∫£nh base64 trong HTML")
            return None
        
        # TƒÉng s·ªë l∆∞·ª£ng l√° s·ªë cho user_id
        if user_id not in user_chart_counts:
            user_chart_counts[user_id] = 1
        else:
            user_chart_counts[user_id] += 1
        
        # L∆∞u ·∫£nh v√†o file
        image_path = f"assets/{user_id}_{user_chart_counts[user_id]}.jpg"
        
        with open(image_path, 'wb') as f:
            f.write(base64.b64decode(matches[0]))
        
        logger.info(f"ƒê√£ l∆∞u ·∫£nh t·ª´ base64 cho user {user_id}: {image_path}")
        
        # L∆∞u th√¥ng tin v√† base64 v√†o c∆° s·ªü d·ªØ li·ªáu
        save_chart(user_id, user_data, matches[0])
        
        return image_path
    
    except Exception as e:
        logger.error(f"L·ªói khi tr√≠ch xu·∫•t ·∫£nh base64: {e}")
        return None

def main():
    """Kh·ªüi ch·∫°y bot."""
    # Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu
    init_database()
    
    logger.info("Bot ƒë√£ kh·ªüi ƒë·ªông!")
    bot.infinity_polling()

@bot.callback_query_handler(func=lambda call: call.data.startswith("detail_"))
def handle_detail_request(call):
    """X·ª≠ l√Ω y√™u c·∫ßu xem chi ti·∫øt v·ªÅ m·ªôt kh√≠a c·∫°nh c·ª• th·ªÉ."""
    chat_id = call.message.chat.id
    aspect = call.data.split("_")[1]
    
    # G·ª≠i th√¥ng b√°o ƒëang ph√¢n t√≠ch
    processing_msg = bot.send_message(
        chat_id, 
        "‚è≥ *ƒêang ph√¢n t√≠ch chi ti·∫øt v·ªÅ {get_aspect_name(aspect)}...*\n\nVui l√≤ng ƒë·ª£i trong gi√¢y l√°t.",
        parse_mode='Markdown'
    )
    
    try:
        # L·∫•y th√¥ng tin t·ª´ user_data (c√≥ th·ªÉ l∆∞u t·∫°m v√†o session ƒë·ªÉ t√°i s·ª≠ d·ª•ng)
        day = call.message.text.split("Ng√†y sinh:")[1].split("\n")[0].strip() if "Ng√†y sinh:" in call.message.text else "kh√¥ng r√µ"
        # T∆∞∆°ng t·ª± cho th√°ng, nƒÉm, gi·ªù sinh, gi·ªõi t√≠nh
        
        # Ph√¢n t√≠ch chi ti·∫øt b·∫±ng AI
        detailed_analysis = get_detailed_analysis(aspect, day)
        
        # X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
        bot.delete_message(chat_id, processing_msg.message_id)
        
        # G·ª≠i ph√¢n t√≠ch chi ti·∫øt
        bot.send_message(
            chat_id,
            detailed_analysis,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"L·ªói khi ph√¢n t√≠ch chi ti·∫øt: {e}")
        bot.send_message(
            chat_id,
            "‚ùå *ƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch chi ti·∫øt*\n\nVui l√≤ng th·ª≠ l·∫°i sau.",
            parse_mode='Markdown'
        )
        # X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
        bot.delete_message(chat_id, processing_msg.message_id)

def get_aspect_name(aspect):
    """L·∫•y t√™n ƒë·∫ßy ƒë·ªß c·ªßa kh√≠a c·∫°nh."""
    mapping = {
        "career": "S·ª± nghi·ªáp",
        "love": "T√¨nh duy√™n",
        "wealth": "T√†i l·ªôc",
        "health": "S·ª©c kh·ªèe"
    }
    return mapping.get(aspect, aspect)

def get_detailed_analysis(aspect, day):
    """L·∫•y ph√¢n t√≠ch chi ti·∫øt v·ªÅ m·ªôt kh√≠a c·∫°nh c·ª• th·ªÉ."""
    # Ph√¢n t√≠ch chi ti·∫øt b·∫±ng AI - t∆∞∆°ng t·ª± nh∆∞ analyze_chart_with_gpt
    # ...
    
    # Demo return
    return f"‚ú® *CHI TI·∫æT V·ªÄ {get_aspect_name(aspect).upper()}* ‚ú®\n\n" + \
           f"ƒê√¢y l√† ph√¢n t√≠ch chi ti·∫øt v·ªÅ {get_aspect_name(aspect).lower()} cho ng∆∞·ªùi sinh ng√†y {day}.\n\n" + \
           "‚Ä¢ Ph√¢n t√≠ch chi ti·∫øt s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán d·ª±a tr√™n c√°c sao trong l√° s·ªë.\n" + \
           "‚Ä¢ Bot ƒëang trong qu√° tr√¨nh ho√†n thi·ªán t√≠nh nƒÉng n√†y."

def save_user(user):
    """L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√†o c∆° s·ªü d·ªØ li·ªáu"""
    conn = get_db_connection()
    if not conn:
        return False
    
    try:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO users (telegram_id, first_name, last_name, username)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (telegram_id) 
            DO UPDATE SET 
                first_name = EXCLUDED.first_name,
                last_name = EXCLUDED.last_name,
                username = EXCLUDED.username
            RETURNING id
        """, (user.id, user.first_name, user.last_name, user.username))
        
        result = cursor.fetchone()
        logger.info(f"ƒê√£ l∆∞u th√¥ng tin ng∆∞·ªùi d√πng {user.id}")
        return result[0] if result else None
    except Exception as e:
        logger.error(f"L·ªói khi l∆∞u th√¥ng tin ng∆∞·ªùi d√πng: {e}")
        return None
    finally:
        cursor.close()
        conn.close()

def save_chart(user_id, chart_data, base64_image):
    """L∆∞u l√° s·ªë t·ª≠ vi v√† h√¨nh ·∫£nh base64 v√†o c∆° s·ªü d·ªØ li·ªáu"""
    conn = get_db_connection()
    if not conn:
        return False
    
    try:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO charts (user_id, day, month, year, birth_time, gender, chart_image)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
            RETURNING id
        """, (
            user_id, 
            chart_data['day'], 
            chart_data['month'], 
            chart_data['year'], 
            chart_data['birth_time'], 
            chart_data['gender'], 
            base64_image
        ))
        
        result = cursor.fetchone()
        logger.info(f"ƒê√£ l∆∞u l√° s·ªë t·ª≠ vi cho user {user_id}")
        return result[0] if result else None
    except Exception as e:
        logger.error(f"L·ªói khi l∆∞u l√° s·ªë t·ª≠ vi: {e}")
        return None
    finally:
        cursor.close()
        conn.close()

def get_user_charts(user_id, limit=5):
    """L·∫•y l·ªãch s·ª≠ l√° s·ªë t·ª≠ vi c·ªßa ng∆∞·ªùi d√πng"""
    conn = get_db_connection()
    if not conn:
        return []
    
    try:
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        cursor.execute("""
            SELECT id, day, month, year, birth_time, gender, created_at
            FROM charts
            WHERE user_id = %s
            ORDER BY created_at DESC
            LIMIT %s
        """, (user_id, limit))
        
        return cursor.fetchall()
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y l·ªãch s·ª≠ l√° s·ªë t·ª≠ vi: {e}")
        return []
    finally:
        cursor.close()
        conn.close()

def get_chart_image(chart_id):
    """L·∫•y h√¨nh ·∫£nh l√° s·ªë t·ª≠ vi t·ª´ ID"""
    conn = get_db_connection()
    if not conn:
        return None
    
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT chart_image
            FROM charts
            WHERE id = %s
        """, (chart_id,))
        
        result = cursor.fetchone()
        return result[0] if result else None
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y h√¨nh ·∫£nh l√° s·ªë t·ª≠ vi: {e}")
        return None
    finally:
        cursor.close()
        conn.close()

@bot.message_handler(commands=['history'])
def history_command(message):
    """Hi·ªÉn th·ªã l·ªãch s·ª≠ l√° s·ªë t·ª≠ vi c·ªßa ng∆∞·ªùi d√πng."""
    chat_id = message.chat.id
    
    # L·∫•y l·ªãch s·ª≠ l√° s·ªë t·ª≠ vi
    charts = get_user_charts(chat_id)
    
    if not charts:
        bot.send_message(
            chat_id,
            "üîç *B·∫°n ch∆∞a c√≥ l√° s·ªë t·ª≠ vi n√†o*\n\n"
            "G√µ /start ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫≠p l√° s·ªë m·ªõi.",
            parse_mode='Markdown'
        )
        return
    
    # T·∫°o th√¥ng b√°o l·ªãch s·ª≠
    history_message = "üìú *L·ªäCH S·ª¨ L√Å S·ªê T·ª¨ VI C·ª¶A B·∫†N*\n\n"
    
    for i, chart in enumerate(charts, 1):
        date_created = chart['created_at'].strftime("%d/%m/%Y %H:%M")
        history_message += f"{i}. Ng√†y sinh: {chart['day']}/{chart['month']}/{chart['year']}, "\
                          f"Gi·ªù sinh: {chart['birth_time']}, "\
                          f"Gi·ªõi t√≠nh: {chart['gender']}\n"\
                          f"   Ng√†y l·∫≠p: {date_created}\n\n"
    
    # T·∫°o inline keyboard ƒë·ªÉ xem l·∫°i c√°c l√° s·ªë
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    for i, chart in enumerate(charts, 1):
        markup.add(types.InlineKeyboardButton(
            f"Xem l·∫°i l√° s·ªë {i}", 
            callback_data=f"view_chart_{chart['id']}"
        ))
    
    bot.send_message(
        chat_id,
        history_message,
        reply_markup=markup,
        parse_mode='Markdown'
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_chart_"))
def handle_view_chart(call):
    """X·ª≠ l√Ω y√™u c·∫ßu xem l·∫°i l√° s·ªë t·ª≠ vi."""
    chat_id = call.message.chat.id
    chart_id = int(call.data.split("_")[2])
    
    # L·∫•y h√¨nh ·∫£nh l√° s·ªë
    base64_image = get_chart_image(chart_id)
    
    if not base64_image:
        bot.send_message(
            chat_id,
            "‚ùå *Kh√¥ng t√¨m th·∫•y l√° s·ªë t·ª≠ vi*",
            parse_mode='Markdown'
        )
        return
    
    # L∆∞u ·∫£nh t·∫°m ƒë·ªÉ g·ª≠i
    temp_image_path = f"temp_analysis_{chart_id}.jpg"
    with open(temp_image_path, 'wb') as f:
        f.write(base64.b64decode(base64_image))
    
    # G·ª≠i ·∫£nh cho ng∆∞·ªùi d√πng
    with open(temp_image_path, 'rb') as photo:
        bot.send_photo(
            chat_id,
            photo,
            caption="‚ú® *L√° s·ªë t·ª≠ vi c·ªßa b·∫°n*",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üîÆ Ph√¢n t√≠ch l√° s·ªë", callback_data=f"analyze_chart_{chart_id}")
            ),
            parse_mode='Markdown'
        )
    
    # X√≥a file t·∫°m
    os.remove(temp_image_path)

@bot.callback_query_handler(func=lambda call: call.data.startswith("analyze_chart_"))
def handle_analyze_chart(call):
    """X·ª≠ l√Ω y√™u c·∫ßu ph√¢n t√≠ch l√° s·ªë t·ª≠ vi t·ª´ l·ªãch s·ª≠."""
    chat_id = call.message.chat.id
    chart_id = int(call.data.split("_")[2])
    
    # G·ª≠i th√¥ng b√°o ƒëang ph√¢n t√≠ch
    processing_msg = bot.send_message(
        chat_id, 
        "‚è≥ *ƒêang ph√¢n t√≠ch l√° s·ªë t·ª≠ vi...*\n\nVui l√≤ng ƒë·ª£i trong gi√¢y l√°t, qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t 30-60 gi√¢y.",
        parse_mode='Markdown'
    )
    
    try:
        # L·∫•y th√¥ng tin l√° s·ªë t·ª´ c∆° s·ªü d·ªØ li·ªáu
        conn = get_db_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        cursor.execute("""
            SELECT day, month, year, birth_time, gender, chart_image
            FROM charts
            WHERE id = %s
        """, (chart_id,))
        
        chart_data = cursor.fetchone()
        
        if not chart_data:
            bot.send_message(
                chat_id,
                "‚ùå *Kh√¥ng t√¨m th·∫•y l√° s·ªë t·ª≠ vi*",
                parse_mode='Markdown'
            )
            bot.delete_message(chat_id, processing_msg.message_id)
            return
        
        # L∆∞u ·∫£nh t·∫°m ƒë·ªÉ ph√¢n t√≠ch
        temp_image_path = f"temp_analysis_{chart_id}.jpg"
        with open(temp_image_path, 'wb') as f:
            f.write(base64.b64decode(chart_data['chart_image']))
        
        # Ph√¢n t√≠ch l√° s·ªë
        analysis = analyze_chart_with_gpt(temp_image_path, chart_data)
        
        # X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
        bot.delete_message(chat_id, processing_msg.message_id)
        
        # G·ª≠i ph√¢n t√≠ch cho ng∆∞·ªùi d√πng
        # Ph√¢n t√≠ch c√≥ th·ªÉ d√†i, c·∫ßn chia th√†nh nhi·ªÅu ph·∫ßn n·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n
        max_length = 4000  # Gi·ªõi h·∫°n tin nh·∫Øn Telegram
        
        if len(analysis) <= max_length:
            bot.send_message(chat_id, analysis, parse_mode='Markdown')
        else:
            # Chia ph√¢n t√≠ch th√†nh nhi·ªÅu ph·∫ßn
            parts = [analysis[i:i+max_length] for i in range(0, len(analysis), max_length)]
            for i, part in enumerate(parts):
                if i == 0:  # Ph·∫ßn ƒë·∫ßu ti√™n
                    bot.send_message(chat_id, part, parse_mode='Markdown')
                else:  # C√°c ph·∫ßn ti·∫øp theo
                    bot.send_message(chat_id, f"(ti·∫øp theo)...\n\n{part}", parse_mode='Markdown')
        
        # Th√™m l·ª±a ch·ªçn xem chi ti·∫øt t·ª´ng kh√≠a c·∫°nh
        detail_markup = types.InlineKeyboardMarkup(row_width=2)
        detail_markup.add(
            types.InlineKeyboardButton("üí∞ S·ª± nghi·ªáp & T√†i l·ªôc", callback_data=f"detail_career_{chart_id}"),
            types.InlineKeyboardButton("‚ù§Ô∏è T√¨nh duy√™n & H√¥n nh√¢n", callback_data=f"detail_love_{chart_id}"),
            types.InlineKeyboardButton("üè• S·ª©c kh·ªèe & T√¢m l√Ω", callback_data=f"detail_health_{chart_id}"),
            types.InlineKeyboardButton("üîë Ph∆∞∆°ng ph√°p khai v·∫≠n", callback_data=f"detail_remedies_{chart_id}")
        )
        
        bot.send_message(
            chat_id,
            "üëá *B·∫°n mu·ªën xem chi ti·∫øt v·ªÅ kh√≠a c·∫°nh n√†o?*",
            reply_markup=detail_markup,
            parse_mode='Markdown'
        )
        
        # X√≥a file t·∫°m
        os.remove(temp_image_path)
        
    except Exception as e:
        logger.error(f"L·ªói khi ph√¢n t√≠ch l√° s·ªë t·ª≠ vi: {e}")
        bot.send_message(
            chat_id,
            "‚ùå *ƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch l√° s·ªë t·ª≠ vi*\n\nVui l√≤ng th·ª≠ l·∫°i sau.",
            parse_mode='Markdown'
        )
        # X√≥a th√¥ng b√°o ƒëang x·ª≠ l√Ω
        bot.delete_message(chat_id, processing_msg.message_id)

if __name__ == "__main__":
    main() 